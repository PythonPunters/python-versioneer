
SHORT_VERSION_PY = """
# This file was generated by 'versioneer.py' (@VERSIONEER-VERSION@) from
# revision-control system data, or from the parent directory name of an
# unpacked source archive. Distribution tarballs contain a pre-generated copy
# of this file.

import json
import sys
import types

version_json = '''
%s
'''  # END VERSION_JSON


def get_versions(default={}, verbose=False):
    unicode_versions = json.loads(version_json)
    if sys.version_info[0] >= 3:
        return unicode_versions
    versions = {}
    for unicode_key, value in unicode_versions.items():
        if isinstance(value, types.UnicodeType):
            value = value.encode("ascii")
        versions[unicode_key.encode("ascii")] = value
    return versions
"""

DEFAULT = {"version": "0+unknown", "full": "unknown"}

import sys # --STRIP DURING BUILD
import types # --STRIP DURING BUILD
import json # --STRIP DURING BUILD
import re # --STRIP DURING BUILD

def versions_from_file(filename):
    try:
        with open(filename) as f:
            contents = f.read()
    except EnvironmentError:
        return {}
    mo = re.search(r"version_json = '''\n(.*)'''  # END VERSION_JSON",
                   contents, re.M | re.S)
    if not mo:
        return {}
    unicode_versions = json.loads(mo.group(1))
    if sys.version_info[0] >= 3:
        return unicode_versions
    versions = {}
    for unicode_key, value in unicode_versions.items():
        if isinstance(value, types.UnicodeType):
            value = value.encode("ascii")
        versions[unicode_key.encode("ascii")] = value
    return versions


def write_to_version_file(filename, versions):
    contents = json.dumps(versions, sort_keys=True,
                          indent=1, separators=(",", ": "))
    with open(filename, "w") as f:
        f.write(SHORT_VERSION_PY % contents)

    print("set %s to '%s'" % (filename, versions["version"]))

